name: Deploy

on: 
  push:
  pull_request:

env:
  AWS_ECR_REPO_NAME: flask-app
  AWS_ECS_CLUSTER_NAME: KarlCluster
  AWS_ECS_SERVICE_NAME: WebAppService
  TASK_DEFITION_FAMILY: webapp

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      REPO: ${{ steps.ecr-data.outputs.registry }} 
      IMAGE: ${{ steps.dockerImage.outputs.image }} 
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    steps:
      - name: Download the files
        uses: actions/checkout@v4

      - name: Login to ECR
        id: ecr-data
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push docker image
        id: dockerImage
        run: |
          docker build -t $REPO/$AWS_ECR_REPO_NAME:$TAG .
          docker push $REPO/$AWS_ECR_REPO_NAME:$TAG
          echo "image=$REPO/$AWS_ECR_REPO_NAME:$TAG" >> $GITHUB_OUTPUT
        env:
          REPO: ${{ steps.ecr-data.outputs.registry }}
          TAG: ${{ github.sha }}

      - name: verify docker image
        run: echo "${{ steps.dockerImage.outputs.image }}"

  deploy:
    needs: ["build"]
    runs-on: ubuntu-latest
    environment: dev
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
    steps:
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFITION_FAMILY --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: flaskapp
          image: ${{ needs.build.outputs.IMAGE }}

      - name: Print the td.json
        run: cat task-definition.json

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: $AWS_ECS_SERVICE_NAME
          cluster: $AWS_ECS_CLUSTER_NAME
          wait-for-service-stability: true